import pandas as pd
from collections import OrderedDict

# Assume roster_df and error_codes_df already loaded from earlier
# If not, uncomment the next two lines:
# roster_df = pd.read_excel("/mnt/data/roster_data.xlsx")
# error_codes_df = pd.read_excel("/mnt/data/error_codes.xlsx")

# Build a mapping from code -> description
code_to_desc = (
    error_codes_df
    .set_index("error_code")["description"]
    .to_dict()
)

def codes_to_descriptions(codes_str: str) -> str:
    """Turn 'E002, E010, ...' into 'Missing NPI TYPE 1, Missing PROVIDER EFFECTIVE DATE, ...'
       - preserves the original order
       - removes duplicates
       - skips unknown/blank codes gracefully
    """
    if pd.isna(codes_str) or not str(codes_str).strip():
        return ""
    # Split, strip, preserve order & uniqueness
    seen = OrderedDict()
    for raw in str(codes_str).split(","):
        code = raw.strip()
        if not code:
            continue
        desc = code_to_desc.get(code, "")
        if desc:
            seen[desc] = None  # acts like an ordered set
    return ", ".join(seen.keys())

# Create the new column
roster_df["Error Descriptions"] = roster_df["Error Code"].apply(codes_to_descriptions)

# Save result to Excel
outfile = "/mnt/data/roster_with_error_descriptions.xlsx"
roster_df.to_excel(outfile, index=False)

outfile, roster_df[["Error Code", "Error Descriptions"]].head()

*******************************************************************
import pandas as pd

# Load both Excel files into DataFrames
roster_df = pd.read_excel("/mnt/data/roster_data.xlsx")
error_codes_df = pd.read_excel("/mnt/data/error_codes.xlsx")

# Display first few rows of both for verification
(roster_df.head(), error_codes_df.head())

# --- Split multiple error codes into separate rows ---
roster_expanded = (
    roster_df
    .assign(Error_Code=roster_df["Error Code"].str.split(",\s*"))  # split comma-separated error codes
    .explode("Error_Code")  # expand into multiple rows
)

# --- Clean whitespaces ---
roster_expanded["Error_Code"] = roster_expanded["Error_Code"].str.strip()

# --- Join with error codes table ---
final_df = roster_expanded.merge(
    error_codes_df,
    left_on="Error_Code",
    right_on="error_code",
    how="left"
)

# --- Save to Excel ---
output_file = "/mnt/data/roster_with_error_details.xlsx"
final_df.to_excel(output_file, index=False)

output_file



# Expand roster_df Error Code column and join with error_codes_df

# Step 1: Split comma-separated error codes into lists
roster_expanded = (
    roster_df
    .assign(Error_Code=roster_df["Error Code"].str.split(",\s*"))
    .explode("Error_Code")
)

# Step 2: Clean whitespaces from error codes
roster_expanded["Error_Code"] = roster_expanded["Error_Code"].str.strip()

# Step 3: Join with error_codes_df to bring error descriptions
final_df = roster_expanded.merge(
    error_codes_df,
    left_on="Error_Code",
    right_on="error_code",
    how="left"
)

# Step 4: Save to Excel for user to download
sample_file = "/mnt/data/sample_roster_with_error_details.xlsx"
final_df.to_excel(sample_file, index=False)

# Show first few rows of combined dataframe for preview
final_df.head(), sample_file

**********************************************************************
# Expand roster_df Error Code column and join with error_codes_df

# Step 1: Split comma-separated error codes into lists
roster_expanded = (
    roster_df
    .assign(Error_Code=roster_df["Error Code"].str.split(",\s*"))
    .explode("Error_Code")
)

# Step 2: Clean whitespaces from error codes
roster_expanded["Error_Code"] = roster_expanded["Error_Code"].str.strip()

# Step 3: Join with error_codes_df to bring error descriptions
final_df = roster_expanded.merge(
    error_codes_df,
    left_on="Error_Code",
    right_on="error_code",
    how="left"
)

# Step 4: Save to Excel for user to download
sample_file = "/mnt/data/sample_roster_with_error_details.xlsx"
final_df.to_excel(sample_file, index=False)

# Show first few rows of combined dataframe for preview
final_df.head(), sample_file
